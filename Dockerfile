# ETAPA 1: CONSTRUCCI칍N (BUILD)
FROM maven:3.9.6-eclipse-temurin-21 AS build

# Copiamos todo el repositorio a /app
COPY . /app

# Configuramos el directorio de trabajo para que sea donde est치n los artefactos de Maven
WORKDIR /app/demo 

# 游댮 FIX CR칈TICO: Ejecutamos el clean install desde el directorio 'demo' 
# (donde est치 el src y se esperar칤a el pom.xml, pero como el pom.xml est치 en la ra칤z, usaremos el comando mvn de otra manera)

# El comando mvn DEBE ejecutarse donde est치 el pom.xml, que es la ra칤z.
# Pero el c칩digo fuente est치 en una subcarpeta 'demo/src'

# Regresamos al m칠todo anterior, pero con las rutas correctas:

FROM maven:3.9.6-eclipse-temurin-21 AS build
WORKDIR /app

# 1. Copia el pom.xml desde la ra칤z (donde est치)
COPY pom.xml .

# 2. Copia la carpeta 'demo' que contiene el 'src'
COPY demo/ ./demo

# 3. Compila el proyecto, apuntando al pom.xml y al c칩digo fuente.
# Necesitamos decirle a Maven d칩nde encontrar el src. La forma m치s f치cil es 
# copiar y trabajar en la estructura est치ndar:

# COPIAMOS TODO A LA RAIZ DEL CONTENEDOR Y NOS FIJAMOS EN EL POM.XML

FROM maven:3.9.6-eclipse-temurin-21 AS build
WORKDIR /app

# Copia el pom.xml de la ra칤z
COPY pom.xml .

# 游댮 FIX CR칈TICO: Copiamos el contenido de 'demo/src' a la ra칤z del WORKDIR (/app/src)
# Si su c칩digo fuente principal es 'demo/src', el Dockerfile debe reflejarlo:
COPY demo/src ./src 

# Esto no funcionar치 si la carpeta 'target' ya existe, y no queremos copiar target.

# 춰La soluci칩n m치s simple es copiar todo y luego compilar!
